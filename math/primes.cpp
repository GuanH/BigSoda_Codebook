/* 12721, 13331, 14341, 75577, 123457, 222557, 556679
* 999983, 1097774749, 1076767633, 100102021, 999997771
* 1001010013, 1000512343, 987654361, 999991231
* 999888733, 98789101, 987777733, 999991921, 1010101333
* 1010102101, 1000000000039, 1000000000000037
* 2305843009213693951, 4611686018427387847
* 9223372036854775783, 18446744073709551557 */
int lpf[N], phi[N], mu[N];
bitset<N + 1> np;
vector<int> primes;
void sieve() {
    np[0] = np[1] = phi[1] = mu[1] = 1;
    for(int i = 2; i < N; i++) {
        if (!np[i]) {
            primes.push_back(i);
            lpf[i] = i;
            phi[i] = i - 1;
            mu[i] = -1;
        }
        for(int p : primes) {
            int j = i * p;
            if (j >= N) break;
            np[j] = 1;
            lpf[j] = p;
            if (i % p == 0) {
                phi[j] = p * phi[i];
                mu[j] = 0;
                break;
            }
            phi[j] = phi[i] * phi[p];
            mu[j] = -mu[i];
} } }
